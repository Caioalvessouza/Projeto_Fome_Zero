#LIBRARIES - bibliotecas
import pandas as pd
import numpy as np
import plotly.express as px
import folium
from streamlit_folium import folium_static
import matplotlib.pyplot as plt
import streamlit as st
from datetime import datetime
##(biblioteca para buscar imagem dentro do notebook)
from PIL import Image
#pip install haversine
from haversine import haversine
# Importe o m√≥dulo de express√µes regulares
import re
import inflection
import seaborn as sns

csv_path = r'C:\Users\Caio\Documents\cientista de dados\phyton\Projeto do aluno\zomato\data.csv'
df = pd.read_csv(csv_path)

COUNTRIES = {
    1: "√çndia",
    14: "Austr√°lia",
    30: "Brasil",
    37: "Canad√°",
    94: "Indon√©sia",
    148: "Nova Zel√¢ndia",
    162: "Filipinas",
    166: "Catar",
    184: "Singapura",
    189: "√Åfrica do Sul",
    191: "Sri Lanka",
    208: "Turquia",
    214: "Emirados √Årabes Unidos",
    215: "Inglaterra",
    216: "Estados Unidos da Am√©rica",
}
# Adicione a coluna 'country' ao DataFrame usando o mapeamento
df['country'] = df['Country Code'].map(COUNTRIES)

st.set_page_config(page_title="Cities", page_icon="üèôÔ∏è", layout="wide")



st.sidebar.markdown("## Filtros")

# Utilizando isin para filtrar os dados
selected_countries = st.sidebar.multiselect(
    "Escolha os Paises que Deseja visualizar os Restaurantes",
    df['country'].unique().tolist(),
    default=["Brasil", "Inglaterra", "Catar", "√Åfrica do Sul", "Canad√°", "Austr√°lia"]
)

# Criar uma c√≥pia do DataFrame
df_copy = df.copy()

# Tratar valores NA removendo linhas
df_copy = df_copy.dropna(subset=['Cuisines'])

# Modificar a c√≥pia
df_copy["Cuisines"] = df_copy["Cuisines"].apply(lambda x: x.split(",")[0].strip() if isinstance(x, str) else x)

# Remover duplicatas
df_copy = df_copy.drop_duplicates(subset=['Cuisines'])

# Atribuir a c√≥pia de volta ao DataFrame original
df = df_copy

# Criar a m√©trica para o n√∫mero de tipos de culin√°rias cadastradas
num_unique_cuisines = df['Cuisines'].nunique()
filtered_df = df[df['country'].isin(selected_countries)]

st.markdown("# :cityscape: Vis√£o Cidades")

##---------------------- TOP 10 CIDADES COM MAIS RESTAURANTES NA BASE DE DADOS --------------------------------

# 1 - Agrupe por pa√≠s e cidade e conte o n√∫mero de restaurantes em cada grupo
#contagem_restaurantes = df.groupby(['country', 'City'])['Restaurant ID'].count().reset_index()

contagem_restaurantes = filtered_df.groupby(['country', 'City'])['Restaurant ID'].count().reset_index()

# 2 - Ordene em ordem decrescente para encontrar as cidades e pa√≠ses com mais restaurantes
contagem_ordenada = contagem_restaurantes.sort_values(by='Restaurant ID', ascending=False)

# 3 - Dicion√°rio de cores para cada pa√≠s
cores_por_pais = {
    "√çndia": "rgb(255, 0, 0)",
    "Austr√°lia": "rgb(0, 0, 255)",
    "Brasil": "rgb(0, 128, 0)",
    "Canad√°": "rgb(255, 165, 0)",
    "Indon√©sia": "rgb(255, 192, 203)",
    "Nova Zel√¢ndia": "rgb(128, 0, 128)",
    "Filipinas": "rgb(255, 255, 0)",
    "Catar": "rgb(255, 69, 0)",
    "Singapura": "rgb(255, 140, 0)",
    "√Åfrica do Sul": "rgb(0, 255, 0)",
}

# 2 - Adicionando a coluna do pa√≠s para obter a legenda
top_cities_df = filtered_df[filtered_df['City'].isin(contagem_ordenada.head(10)['City'])][['City', 'country']]



# 4 - Gr√°fico de barras com legendas personalizadas
fig = px.bar(
    contagem_ordenada.head(10),
    x='City',
    y='Restaurant ID',
    color='country',
    color_discrete_map=cores_por_pais,
    labels={'City': 'Cidade', 'Restaurant ID': 'N√∫mero de Restaurantes', 'country': 'Pa√≠s'},
    title='Top 10 Cidades com Mais Restaurantes',
)

# 5 - Adicionando r√≥tulos √†s barras
fig.update_traces(texttemplate='%{y}', textposition='outside')

# 7 - Ajustando o tamanho do gr√°fico
fig.update_layout(width=1000, height=450)  # Ajuste os valores de largura (width) e altura (height) conforme necess√°rio

# 6 - Centralizando o t√≠tulo
fig.update_layout(title_x=0.2)



# 7 - Exibindo o gr√°fico no Streamlit
st.plotly_chart(fig)


##---------------------- TOP 7 cidades com restaurantes com m√©dia de avalia√ß√£o acima de 4 --------------------------------
# 1 - Agrupe por pa√≠s e cidade, calcule a m√©dia das avalia√ß√µes e conte o n√∫mero de restaurantes em cada grupo
avaliacao_media_cidades = filtered_df.groupby(['country', 'City'])['Aggregate rating'].mean().reset_index()

# 2 - Filtrar para cidades com m√©dia de avalia√ß√£o acima de 4
cidades_acima_de_4 = avaliacao_media_cidades[avaliacao_media_cidades['Aggregate rating'] > 4].sort_values(by='Aggregate rating', ascending=False).head(7)

# 3 - Dicion√°rio de cores para cada pa√≠s
cores_por_pais = {
    "√çndia": "rgb(255, 0, 0)",
    "Austr√°lia": "rgb(0, 0, 255)",
    "Brasil": "rgb(0, 128, 0)",
    "Canad√°": "rgb(255, 165, 0)",
    "Indon√©sia": "rgb(255, 192, 203)",
    "Nova Zel√¢ndia": "rgb(128, 0, 128)",
    "Filipinas": "rgb(255, 255, 0)",
    "Catar": "rgb(255, 69, 0)",
    "Singapura": "rgb(255, 140, 0)",
    "√Åfrica do Sul": "rgb(0, 255, 0)",
}

# 4 - Gr√°fico de barras com legendas personalizadas
fig_avaliacao = px.bar(
    cidades_acima_de_4,
    x='City',
    y='Aggregate rating',
    color='country',
    color_discrete_map=cores_por_pais,
    labels={'City': 'Cidade', 'Aggregate rating': 'M√©dia de Avalia√ß√£o', 'country': 'Pa√≠s'},
    title='Top 7 Cidades com M√©dia de Avalia√ß√£o Acima de 4',
)

# 5 - Adicionando r√≥tulos √†s barras
fig_avaliacao.update_traces(texttemplate='%{y}', textposition='outside')

# 7 - Ajustando o tamanho do gr√°fico
fig_avaliacao.update_layout(width=1300, height=450)  # Ajuste os valores de largura (width) e altura (height) conforme necess√°rio

# 6 - Centralizando o t√≠tulo
fig_avaliacao.update_layout(title_x=0.2)

# 7 - Exibindo o gr√°fico no Streamlit
st.plotly_chart(fig_avaliacao)


##---------------------- TOP  cidades com restaurantes com m√©dia de avalia√ß√£o abaixo 2.5 --------------------------------

# Filtrar para cidades especificadas
cidades_especificas = df[df['City'].isin(['Gangtok', 'Ooty'])]

# Dicion√°rio de cores para cada pa√≠s
cores_por_pais = {
    "√çndia": "rgb(255, 0, 0)",
    "Austr√°lia": "rgb(0, 0, 255)",
    "Brasil": "rgb(0, 128, 0)",
    "Canad√°": "rgb(255, 165, 0)",
    "Indon√©sia": "rgb(255, 192, 203)",
    "Nova Zel√¢ndia": "rgb(128, 0, 128)",
    "Filipinas": "rgb(255, 255, 0)",
    "Catar": "rgb(255, 69, 0)",
    "Singapura": "rgb(255, 140, 0)",
    "√Åfrica do Sul": "rgb(0, 255, 0)",
}

# Criar um DataFrame com as avalia√ß√µes espec√≠ficas
data = {'City': ['Gangtok', 'Ooty'],
        'Aggregate rating': [1.774118, 2.453933],
        'country': ['√çndia', '√çndia']}

cidades_especificas = pd.DataFrame(data)

# Gr√°fico de barras com legendas personalizadas
fig_avaliacao = px.bar(
    cidades_especificas,
    x='City',
    y='Aggregate rating',
    color='country',
    color_discrete_map=cores_por_pais,
    labels={'City': 'Cidade', 'Aggregate rating': 'M√©dia de Avalia√ß√£o', 'country': 'Pa√≠s'},
    title='M√©dia de Avalia√ß√£o para as Cidades avalia√ß√£o abaixo de 2.5',
)

# Adicionando r√≥tulos √†s barras
fig_avaliacao.update_traces(texttemplate='%{y}', textposition='outside')

# Ajustando o tamanho do gr√°fico
fig_avaliacao.update_layout(width=600, height=450)  # Ajuste os valores de largura (width) e altura (height) conforme necess√°rio

# Exibindo o gr√°fico no Streamlit
st.plotly_chart(fig_avaliacao)

##---------------------- TOP 10 cidades com restaurantes com tipos de culin√°rias distintos --------------------------------


# Substitua os dados anteriores pelos novos dados fornecidos
top_cidades_culinarias_distintas = pd.DataFrame({
    'City': ['Birmingham', 'Doha', 'Montreal', 'S√£o Paulo', 'Manchester', 'Houston', 'Perth', 'Philadelphia', 'Portland', 'Calgary'],
    'Distinct_Cuisines_Count': [32, 31, 30, 30, 30, 30, 29, 29, 28, 28]
})

# Dicion√°rio de cores para cada pa√≠s
cores_por_pais = {
    "√çndia": "rgb(255, 0, 0)",
    "Austr√°lia": "rgb(0, 0, 255)",
    "Brasil": "rgb(0, 128, 0)",
    "Canad√°": "rgb(255, 165, 0)",
    "Indon√©sia": "rgb(255, 192, 203)",
    "Nova Zel√¢ndia": "rgb(128, 0, 128)",
    "Filipinas": "rgb(255, 255, 0)",
    "Catar": "rgb(255, 69, 0)",
    "Singapura": "rgb(255, 140, 0)",
    "√Åfrica do Sul": "rgb(0, 255, 0)",
}

# Gr√°fico de barras com legendas personalizadas
fig_culinarias = px.bar(
    top_cidades_culinarias_distintas,
    x='City',
    y='Distinct_Cuisines_Count',
    color='City',  # N√£o √© necess√°rio colorir por pa√≠s, pois voc√™ j√° tem o n√∫mero de culin√°rias distintas por cidade
    color_discrete_map=cores_por_pais,
    labels={'City': 'Cidade', 'Distinct_Cuisines_Count': 'Tipos de Culin√°rias Distintos'},
    title='Top 10 Cidades com Restaurantes que Oferecem Tipos de Culin√°rias Distintos',
)

# Adicionando r√≥tulos √†s barras
fig_culinarias.update_traces(texttemplate='%{y}', textposition='outside')

# Ajustando o tamanho do gr√°fico
fig_culinarias.update_layout(width=1300, height=450)

# Centralizando o t√≠tulo
fig_culinarias.update_layout(title_x=0.2)

# Exibindo o gr√°fico no Streamlit
st.plotly_chart(fig_culinarias)


